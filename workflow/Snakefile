# SPDX-FileCopyrightText: 2025 Koen van Greevenbroek
#
# SPDX-License-Identifier: GPL-3.0-or-later

from snakemake.utils import min_version
import os

min_version("9.0")

os.makedirs("data/downloads", exist_ok=True)


include: "rules/retrieve.smk"


configfile: "config/config.yaml"


wildcard_constraints:
    climate_model=r"[a-zA-Z0-9\-]+",
    variable=r"[a-z]+",
    time_period=r"2020s|2050s|2080s",
    rcp=r"[0-9]p[0-9]",
    input_management=r"H|L",
    water_supply=r"r|i",
    co2_fertilization=r"0*",
    crop=r"[a-z\w]+",


name = config["name"]


rule all:
    input:
        f"results/{name}/solved/model.nc",
        f"results/{name}/plots",


def gadm_inputs(wildcards):
    # Determine GADM level based on region aggregation type
    region_type = config["aggregation"]["regions"]
    if region_type == "countries":
        gadm_level = 0
    elif region_type == "states":
        gadm_level = 1
    else:
        raise ValueError(f"Unsupported region type: {region_type}")
    
    return {
        country: f"data/downloads/gadm41_{country}_{gadm_level}.json.zip"
        for country in config["countries"]
    }


rule build_regions:
    input:
        ancient(unpack(gadm_inputs)),
    output:
        "processing/{name}/regions.geojson",
    script:
        "scripts/build_regions.py"


rule build_crop_yields:
    input:
        yields="data/downloads/gaez_yield_{climate_model}_{time_period}_{rcp}_{input_management}_{water_supply}_{co2_fertilization}_{crop}.tif",
        suitability="data/downloads/gaez_suitability_{climate_model}_{time_period}_{rcp}_{input_management}_{water_supply}_{co2_fertilization}_{crop}.tif",
        regions=f"processing/{name}/regions.geojson",
    output:
        os.path.join(
            "processing",
            name,
            "crop_yields/{climate_model}_{time_period}_{rcp}_{input_management}_{water_supply}_{co2_fertilization}_{crop}.csv",
        ),
    script:
        "scripts/build_crop_yields.py"


def suitability_inputs(wildcards):
    gaez = config["data"]["gaez"]
    return {
        crop: f"data/downloads/gaez_suitability_{gaez['climate_model']}_{gaez['time_period']}_{gaez['rcp']}_{gaez['input_management']}_{gaez['water_supply']}_{gaez['co2_fertilization']}_{gaez['crops'][crop]}.tif"
        for crop in config["crops"]
    }


rule build_region_crop_areas:
    input:
        unpack(suitability_inputs),
        regions=f"processing/{name}/regions.geojson",
    output:
        "processing/{name}/region_crop_areas.csv",
    script:
        "scripts/build_region_crop_areas.py"


def yield_inputs(wildcards):
    gaez = config["data"]["gaez"]
    return {
        crop
        + "_yield": f"processing/{name}/crop_yields/{gaez['climate_model']}_{gaez['time_period']}_{gaez['rcp']}_{gaez['input_management']}_{gaez['water_supply']}_{gaez['co2_fertilization']}_{gaez['crops'][crop]}.csv"
        for crop in config["crops"]
    }


rule build_model:
    input:
        unpack(yield_inputs),
        crops="data/crops.csv",
        foods="data/foods.csv",
        food_groups="data/food_groups.csv",
        nutrition="data/nutrition.csv",
        regions="processing/{name}/regions.geojson",
        region_crop_areas="processing/{name}/region_crop_areas.csv",
    output:
        network="results/{name}/build/model.nc",
    script:
        "scripts/build_model.py"


rule solve_model:
    input:
        network="results/{name}/build/model.nc",
    output:
        network="results/{name}/solved/model.nc",
    script:
        "scripts/solve_model.py"


rule plot_results:
    input:
        network="results/{name}/solved/model.nc",
    output:
        plots_dir=directory("results/{name}/plots"),
    script:
        "scripts/plot_results.py"
